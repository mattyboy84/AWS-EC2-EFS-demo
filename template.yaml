AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  vpcCIDR:
    Type: String
    Description: cidr block for the vpc
    Default: 10.20.0.0/16
  scalingGroupMinSize:
    Type: String
    Default: "0"
  scalingGroupMaxSize:
    Type: String
    Default: "4"
  scalingGroupDesiredSize:
    Type: String
    Default: "2"
  efsMountPoint:
    Type: String
    Description: The directory that the EFS is mounted to
    Default: /mnt/efs
  
Resources:
  instanceRole: #This determines what can be done inside the EC2 instance
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-instanceRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - "arn:aws:iam::aws:policy/AmazonElasticFileSystemClientFullAccess"
  
  instanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Sub "${AWS::StackName}-profile"
      Path: /
      Roles: 
        - !Ref instanceRole
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-InternetGateway"
  
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref EFSvpc
  
  networkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref EFSvpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-networkAcl"
  
  ACLInboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref networkAcl
      RuleNumber: 100
      Egress: false # outgoing
      Protocol: -1 # according to this list https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
  
  ACLOutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref networkAcl
      RuleNumber: 100
      Egress: true # outgoing
      Protocol: -1 # according to this list https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
  
  subnetANetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref subnetA
      NetworkAclId: !Ref networkAcl
  
  subnetBNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref subnetB
      NetworkAclId: !Ref networkAcl
  
  subnetCNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref subnetC
      NetworkAclId: !Ref networkAcl
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EFSvpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PublicRouteTable"
  
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
    DependsOn:
      - VPCGatewayAttachment
  
  subnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref subnetA
  
  subnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref subnetB
  
  subnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref subnetC
  
  EFSvpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref vpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-VPC"
  
  subnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [0, !Cidr [ !GetAtt EFSvpc.CidrBlock, 3, 8 ]]
      AvailabilityZone: !Select [0, Fn::GetAZs: !Ref "AWS::Region"]
      VpcId: !Ref EFSvpc
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-subnetA"
  
  subnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [1, !Cidr [ !GetAtt EFSvpc.CidrBlock, 3, 8 ]]
      AvailabilityZone: !Select [1, Fn::GetAZs: !Ref "AWS::Region"]
      VpcId: !Ref EFSvpc
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-subnetB"
  
  subnetC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [2, !Cidr [ !GetAtt EFSvpc.CidrBlock, 3, 8 ]]
      AvailabilityZone: !Select [2, Fn::GetAZs: !Ref "AWS::Region"]
      VpcId: !Ref EFSvpc
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-subnetC"
  
  instanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub "${AWS::StackName}-SecurityGroup"
      GroupDescription: !Sub "${AWS::StackName}-SecurityGroup description"
      VpcId: !Ref EFSvpc
      SecurityGroupIngress:
        - IpProtocol: tcp #SSH
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - FromPort: 80 #HTTP
          ToPort: 80
          IpProtocol: tcp
          #CidrIp: 0.0.0.0/0
          SourceSecurityGroupId: !Ref LBSecurityGroup
        - FromPort: 443 #HTTPS
          ToPort: 443
          IpProtocol: tcp
          #CidrIp: 0.0.0.0/0
          SourceSecurityGroupId: !Ref LBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-instanceSecurityGroup"
  
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub "${AWS::StackName}-LBSecurityGroup"
      GroupDescription: !Sub "${AWS::StackName}-SecurityGroup description"
      VpcId: !Ref EFSvpc
      SecurityGroupIngress:
        - FromPort: 80 #HTTP
          ToPort: 80
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - FromPort: 443 #HTTPS
          ToPort: 443
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-LBSecurityGroup"
  
  efsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub "${AWS::StackName}-efsSecurityGroup"
      GroupDescription: !Sub "${AWS::StackName}-efsSecurityGroup description"
      VpcId: !Ref EFSvpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-efsSecurityGroup"
  
  placementGroup:
    Type: AWS::EC2::PlacementGroup
    Properties: 
      SpreadLevel: rack
      Strategy: spread
  
  instanceTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-instanceTemplate"
      VersionDescription: "1.0.0"
      LaunchTemplateData:
        ImageId: ami-084e8c05825742534
        InstanceType: t2.micro
        CreditSpecification:
          CpuCredits: standard
        DisableApiTermination: false # true = cannot shutdown via console, api or cli
        EbsOptimized: false # EBS I/O optimized
        InstanceInitiatedShutdownBehavior: stop # what to do when told to 'shutdown'
        Monitoring:
          Enabled: true
        IamInstanceProfile:
          Arn: !GetAtt instanceProfile.Arn
        NetworkInterfaces:
          - DeviceIndex: 0
            DeleteOnTermination: true
            InterfaceType: interface
            SubnetId: !Ref subnetC
            Groups:
              - !Ref instanceSecurityGroup
            AssociatePublicIpAddress: true
        Placement:
          GroupName: !Ref placementGroup
          Tenancy: default
        MetadataOptions:
          HttpEndpoint: enabled # curl http://169.254.169.254/latest/meta-data/
          InstanceMetadataTags: enabled
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
        
            sudo yum -y update
        
            curl https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm -o amazon-cloudwatch-agent.rpm
            sudo yum install -y ./amazon-cloudwatch-agent.rpm
            
            # Create a configuration file for the agent
            sudo tee /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json <<EOF
            {
              "region": "${AWS::Region}",
              "namespace": "{instance_id}",
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {
                        "file_path": "/var/log/messages",
                        "log_group_name": "${instanceTerminalLogs}",
                        "log_stream_name": "{instance_id}"
                      }
                    ]
                  }
                }
              }
            }
            EOF
            # Start and enable the agent
            sudo systemctl start amazon-cloudwatch-agent
            sudo systemctl enable amazon-cloudwatch-agent

            ########################################################################

            sudo yum install -y httpd.x86_64
            sudo systemctl start httpd.service
            sudo systemctl enable httpd.service
            sudo echo “Hello World from $(hostname -f)” > /var/www/html/index.html

            ########################################################################

            sudo mkdir ${efsMountPoint}
            echo "${elasticFileSystem}.efs.${AWS::Region}.amazonaws.com:/    ${efsMountPoint}   nfs4    defaults" >> /etc/fstab
            sudo mount -a
            sudo touch "${efsMountPoint}/$(hostname -f).txt"
    DependsOn:
      - instanceTerminalLogs
  
  instanceTerminalLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/aws/ec2/, !Sub "${AWS::StackName}-terminal"]]
  
  loadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: !Sub "${AWS::StackName}-LB"
      IpAddressType: ipv4
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LBSecurityGroup
      Subnets:
        - !Ref subnetA
        - !Ref subnetC
        - !Ref subnetB
  
  HTTPlistener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref HTTPtargetGroup
      LoadBalancerArn: !Ref loadBalancer
  
  HTTPtargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${AWS::StackName}-LB-HTTP-TG"
      Port: 80
      Protocol: HTTP
      ProtocolVersion: HTTP1
      VpcId: !Ref EFSvpc
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPort: "443"
  
  EC2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-ScalingGroup"
      LaunchTemplate:
        LaunchTemplateId: !Ref instanceTemplate
        Version: !GetAtt instanceTemplate.LatestVersionNumber
      MinSize: !Ref scalingGroupMinSize
      DesiredCapacity: !Ref scalingGroupDesiredSize
      MaxSize: !Ref scalingGroupMaxSize
      DesiredCapacityType: "units"
      VPCZoneIdentifier:
        - !Ref subnetA #contains AZ for deployment
        - !Ref subnetB #contains AZ for deployment
        - !Ref subnetC #contains AZ for deployment
      DefaultInstanceWarmup: 180 #time before metrics are sent to Cloudwatch Metrics
      MetricsCollection:
        - Granularity: "1Minute"
          Metrics:
            - GroupMinSize
            - GroupMaxSize
            - GroupDesiredCapacity
      PlacementGroup: !Ref placementGroup
      NewInstancesProtectedFromScaleIn: false #new instances protected when scaling in (terminated)
      TargetGroupARNs:
        - !Ref HTTPtargetGroup
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-instance"
          PropagateAtLaunch: true
  
  elasticFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
     # AvailabilityZoneName: String
      BackupPolicy:
        Status: DISABLED
      BypassPolicyLockoutSafetyCheck: false #default is false
      Encrypted: true
      LifecyclePolicies:
        - TransitionToIA: AFTER_30_DAYS # After x days of not accessing a file, move to IA
        - TransitionToPrimaryStorageClass: AFTER_1_ACCESS # move from IA to standard after 1 access to a file
      PerformanceMode: generalPurpose # Can be: generalPurpose | maxIO
      ThroughputMode: elastic  # Can be: bursting | elastic | provisioned
      #ProvisionedThroughputInMibps: Double # Required if ThroughputMode is set to provisioned - Can be: 1-3414
      FileSystemTags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-elasticFileSystem"
  
  # These expose the EFS to these subnets.
  # Without these you get: Failed to resolve server fs-123.efs.region.amazonaws.com: Name or service not known
  mountTargetA:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref elasticFileSystem
      SubnetId: !Ref subnetA
      SecurityGroups:
        - !Ref efsSecurityGroup
  
  mountTargetB:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref elasticFileSystem
      SubnetId: !Ref subnetB
      SecurityGroups:
        - !Ref efsSecurityGroup
  
  mountTargetC:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref elasticFileSystem
      SubnetId: !Ref subnetC
      SecurityGroups:
        - !Ref efsSecurityGroup
  